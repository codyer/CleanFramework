apply plugin: 'com.android.application'

// 产品名
def MODULE_NAME = "Clean_"

// 打包时间
def packageTime() {
    return new Date().format("yyyyMMdd_HHmm", TimeZone.getTimeZone("GMT+8"))
}
//加载签名配置的文件
Properties props = new Properties()
props.load(new FileInputStream(file("signing.properties")))

android {

    // 签名配置
    signingConfigs {
        DefaultConfig {
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
            storeFile file(props['KEYSTORE_FILE'])
            storePassword props['KEYSTORE_PASSWORD']
        }
    }

    dataBinding {
        enabled true
    }

    // 编译sdk版本
    compileSdkVersion rootProject.ext.compileSdkVersion

    // 构建工具版本
    buildToolsVersion rootProject.ext.buildToolsVersion

    // 主要是用来设置Library发布所有的variants
//    publishNonDefault true

    // 资源前缀
//    resourcePrefix MODULE_NAME

    // 默认配置
    defaultConfig {
        applicationId "com.cody.app" // apk包名
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName MODULE_NAME + rootProject.ext.versionName // 版本号
        // dex突破65535的限制
        multiDexEnabled true
        // Android 单元测试 test runner
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // 构建类型，此处配置debug和release版本的一些参数，像混淆、签名配置。
    buildTypes {
        debug {
            // 读取设置的签名文件
            signingConfig signingConfigs.DefaultConfig
            // 不进行代码优化
            minifyEnabled false
            // 不进行zip对齐
            zipAlignEnabled false
            // 为包名添加后缀，使调试与正式包可以并存
            applicationIdSuffix ".debug"
            // 在调试包中禁用lint
            project.gradle.startParameter.excludedTaskNames.add("lint")
        }
        // release 包的配置
        release {
            // 启用资源压缩 因为您可能需要编辑 proguard-rules.pro 文件以保留动态创建或调用的类或方法，然后再开始移除资源
//            shrinkResources true
            // 开启代码压缩
            minifyEnabled false
            // 对齐
            zipAlignEnabled true
            // 指定混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 指定签名配置
            signingConfig signingConfigs.DefaultConfig
        }

        demo { initWith(debug) }
        uat { initWith(debug) }
        stg { initWith(release) }
    }

    buildTypes.all { type ->
        if (name.equals("release")) {
            type.manifestPlaceholders = [APP_BUILD_TYPE: "@string/app_name", CHANNEL_ID: name]
        } else {
            type.manifestPlaceholders = [APP_BUILD_TYPE: MODULE_NAME + name, CHANNEL_ID: name]
        }
    }

    // 产品特性
    productFlavors {
        // 自动替换AndroidManifest.xml中的渠道号，同时根据产品特性修改应用名
        productFlavors.all { flavor ->
            if (name.equals("release")) {
                flavor.manifestPlaceholders = [APP_BUILD_TYPE: "@string/app_name", CHANNEL_ID: name]
            } else {
                println("productFlavors +++++++++++++++++++ name=" + name + flavor);
                flavor.manifestPlaceholders = [APP_BUILD_TYPE: "@string/app_name", CHANNEL_ID: name]
            }
        }
    }

    // 打包后自动修改apk的名字
    // release 包的命名格式为：产品名_版本号_渠道号_release_打包时间.apk
    // debug 包的命名格式为：产品名_版本号_渠道号_debug_打包时间.apk
    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (null != outputFile && outputFile.name.endsWith('.apk')) {
                    File outputDir = new File(outputFile.parent + "/${variant.buildType.name}");
                    def newApkName = "${defaultConfig.versionName}" + "_" + variant.buildType.name + "_${packageTime()}.apk"

                    output.outputFile = new File(outputDir, newApkName)
                }
            }
        }
    }
    return void
}

configurations {
    debugCompile
    releaseCompile
    demoCompile
    uatCompile
    stgCompile
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    debugCompile project(path: ':xfoundation', configuration: 'debug')
    releaseCompile project(path: ':xfoundation', configuration: 'release')
    demoCompile project(path: ':xfoundation', configuration: 'debug')
    uatCompile project(path: ':xfoundation', configuration: 'debug')
    stgCompile project(path: ':xfoundation', configuration: 'release')

    debugCompile project(path: ':handler', configuration: 'debug')
    releaseCompile project(path: ':handler', configuration: 'release')
    demoCompile project(path: ':handler', configuration: 'demo')
    uatCompile project(path: ':handler', configuration: 'uat')
    stgCompile project(path: ':handler', configuration: 'stg')
}