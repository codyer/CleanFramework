apply plugin: 'com.android.library'

def MODULE_NAME = 'h'

android {

    dataBinding {
        enabled true
    }

    // 编译sdk版本
    compileSdkVersion rootProject.ext.compileSdkVersion

    // 构建工具版本
    buildToolsVersion rootProject.ext.buildToolsVersion

    // 主要是用来设置Library发布所有的variants
    publishNonDefault true

    // 资源前缀
    resourcePrefix MODULE_NAME + '_'

    // 默认配置
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName // 版本号
        versionNameSuffix '_' + MODULE_NAME
        // dex突破65535的限制
        multiDexEnabled true
    }

    // 构建类型，此处配置debug和release版本的一些参数，像混淆、签名配置。
    buildTypes {
        // release 包的配置
        release {
            // 启用资源压缩 因为您可能需要编辑 proguard-rules.pro 文件以保留动态创建或调用的类或方法，然后再开始移除资源
//            shrinkResources true
            // 开启代码压缩
            minifyEnabled false
            // 对齐
            zipAlignEnabled true
            // 指定混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 产品特性
    productFlavors {
        dev { void }
        uat { void }
        uat1 { void }
        stg { void }
        pro { void }
    }
    return void
}

configurations {
    devDebugCompile
    uatDebugCompile
    uat1DebugCompile
    stgDebugCompile
    proDebugCompile

    devReleaseCompile
    uatReleaseCompile
    uat1ReleaseCompile
    stgReleaseCompile
    proReleaseCompile
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    debugCompile project(path: ':xfoundation', configuration: 'debug')
    releaseCompile project(path: ':xfoundation', configuration: 'release')

    devDebugCompile project(path: ':repository', configuration: 'devDebug')
    uatDebugCompile project(path: ':repository', configuration: 'uatDebug')
    uat1DebugCompile project(path: ':repository', configuration: 'uat1Debug')
    stgDebugCompile project(path: ':repository', configuration: 'stgDebug')
    proDebugCompile project(path: ':repository', configuration: 'proDebug')

    devReleaseCompile project(path: ':repository', configuration: 'devRelease')
    uatReleaseCompile project(path: ':repository', configuration: 'uatRelease')
    uat1ReleaseCompile project(path: ':repository', configuration: 'uat1Release')
    stgReleaseCompile project(path: ':repository', configuration: 'stgRelease')
    proReleaseCompile project(path: ':repository', configuration: 'proRelease')
}
