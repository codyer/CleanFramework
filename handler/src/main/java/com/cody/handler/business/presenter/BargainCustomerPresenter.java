package com.cody.handler.business.presenter;import android.support.annotation.NonNull;import android.text.TextUtils;import com.cody.handler.business.mapper.PotentialCustomerMapper;import com.cody.handler.business.viewmodel.BargainCustomerViewModel;import com.cody.handler.business.viewmodel.ItemPotentialCustomerViewModel;import com.cody.handler.framework.DefaultCallback;import com.cody.handler.framework.presenter.ListWithHeaderBasePresenter;import com.cody.repository.business.bean.PotentialCustomerListBean;import com.cody.repository.business.interaction.LoginNewInteraction;import com.cody.repository.business.interaction.LongInteraction;import com.cody.repository.framework.Repository;import com.cody.xf.XFoundation;import com.cody.xf.utils.DeviceUtil;import com.cody.xf.utils.http.SimpleBean;import java.util.Map;/** * Created by chen.huarong on 2018/8/16. * 成交客户页面 */public class BargainCustomerPresenter extends ListWithHeaderBasePresenter<BargainCustomerViewModel        , ItemPotentialCustomerViewModel> {    public static final String TAG_CALL_USER = "call_user";//打电话    public static final String TAG_SEND_MESSAGE = "send_message";//发短信    private LongInteraction mInteraction;    private LoginNewInteraction mLoginNewInteraction;    private PotentialCustomerMapper mMapper;    public BargainCustomerPresenter() {        mInteraction = Repository.getInteraction(LongInteraction.class);        mLoginNewInteraction = Repository.getInteraction(LoginNewInteraction.class);        mMapper = new PotentialCustomerMapper();        mMapper.setItemWidth((int) (DeviceUtil.getScreenWidth()                - DeviceUtil.dip2px(XFoundation.getContext(), 10) * 2));    }    /**     * 参数拼接参考 @link{http://wiki.corp.rs.com/pages/viewpage.action?pageId=19530271}     *     * @param tag     * @param params     */    @Override    public void getRecycleList(final Object tag, @NonNull Map<String, String> params) {        params.put("queryField", getViewModel().getQueryField());        String sortField = "lastOrderTime:" + getViewModel().getOrderTimeStatus().get();        if (getViewModel().getOrderAmountStatus().get() != 0) {            sortField += ";orderTotalAmount:" + getViewModel().getOrderAmountStatus().get();        }        params.put("sortField", sortField);        mInteraction.getCustomerList(tag, params                , PotentialCustomerListBean.class                , new DefaultCallback<PotentialCustomerListBean>(this) {                    @Override                    public void onBegin(Object tag) {//                        super.onBegin(tag);                    }                    @Override                    public void onSuccess(PotentialCustomerListBean bean) {                        super.onSuccess(bean);                        if (bean != null) {                            boolean hasMore = bean.getTotalCount()                                    > getViewModel().getPageNO() * getViewModel().getPageSize();                            //选择全选或者未发券的时候加载的数据也要设为选中状态                            getViewModel().setTotalCount(bean.getTotalCount());                            mMapper.setNeedCheck(getViewModel().getTotalCheck().get()                                    || getViewModel().getUncouponCheck().get());                            mMapper.setSendCoupons(getViewModel().getIsSendCoupons().get());                            mMapper.mapperList(getViewModel(), bean.getData(), getViewModel().getPosition(), bean                                    .getData                                    ().size() == getViewModel()                                    .getPageSize());                            //选择全选或者未发券的时候加载的数据也要设为选中状态                            getViewModel().setTotalCount(bean.getTotalCount());                            mMapper.setNeedCheck(getViewModel().getTotalCheck().get()                                    || getViewModel().getUncouponCheck().get());                            mMapper.setSendCoupons(getViewModel().getIsSendCoupons().get());                            mMapper.mapperList(getViewModel(), bean.getData(), getViewModel().getPosition(), hasMore);                            if(getViewModel().getTotalCheck().get()                                    || getViewModel().getUncouponCheck().get()){                                getViewModel().setCheckCount(getViewModel().getTotalCount());                            } else {                                getViewModel().setCheckCount(0);                            }                        }                        refreshUI(tag);                    }                });    }    /**     * 获取手机号     *     * @param tag     * @param position     */    public void getUserMobileByOpenId(final Object tag, final int position) {        //手机号不为空则无需再取        if (position < 0 || position >= getViewModel().size())return;        final ItemPotentialCustomerViewModel item = getViewModel().get(position);        String phoneNumber = item.getPhoneNumber();        if (TextUtils.isEmpty(phoneNumber)) {            mLoginNewInteraction.getUserMobileByOpenId(tag                    , item.getOpenId(), SimpleBean.class                    , new DefaultCallback<SimpleBean>(this) {                        @Override                        public void onSuccess(SimpleBean bean) {                            super.onSuccess(bean);                            if (bean != null) {                                item.setPhoneNumber(String.valueOf(bean.getData()));                                refreshUI(tag, bean.getData());                            }                            hideLoading();                        }                    });        } else {            refreshUI(tag, phoneNumber);        }    }    /**     * 切换发券状态     */    public void toggleIsSendCoupon() {        for (int i = 0; i < getViewModel().size(); i++) {            getViewModel().get(i).setIsSendCoupons(getViewModel().getIsSendCoupons().get());        }        if (!getViewModel().getIsSendCoupons().get()) {//取消发券的场合，需要把所有状态重置            cancel();        }        refreshUI();    }    /**     * 切换全选     */    public void toggleCheckAll() {        getViewModel().setUncouponCheck(false);        getViewModel().setTotalCheck(!getViewModel().getTotalCheck().get());        for (int i = 0; i < getViewModel().size(); i++) {            getViewModel().get(i).setCheck(getViewModel().getTotalCheck().get());            getViewModel().get(i).setIsUnSendCoupon(false);        }//        if (getViewModel().getTotalCheck().get()) {//            getViewModel().setCheckCount(getViewModel().getTotalCount());//        } else {//            getViewModel().setCheckCount(0);//        }//        refreshUI();    }    /**     * 切换未发券     */    public void toggleUnSendCoupon() {        getViewModel().setTotalCheck(false);        getViewModel().setUncouponCheck(!getViewModel().getUncouponCheck().get());        for (int i = 0; i < getViewModel().size(); i++) {            getViewModel().get(i).setCheck(getViewModel().getUncouponCheck().get());            getViewModel().get(i).setIsUnSendCoupon(false);        }//        if (getViewModel().getUncouponCheck().get()) {//            getViewModel().setCheckCount(getViewModel().getTotalCount());//        } else {//            getViewModel().setCheckCount(0);//        }//        refreshUI();    }    /**     * 取消发券     */    public void cancel() {        getViewModel().setUncouponCheck(false);        getViewModel().setTotalCheck(false);        for (int i = 0; i < getViewModel().size(); i++) {            getViewModel().get(i).setCheck(false);            getViewModel().get(i).setIsUnSendCoupon(false);        }        getViewModel().setCheckCount(0);    }}