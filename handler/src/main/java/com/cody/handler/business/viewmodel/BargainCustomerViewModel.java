package com.cody.handler.business.viewmodel;import android.databinding.ObservableBoolean;import android.databinding.ObservableField;import android.databinding.ObservableInt;import com.cody.handler.framework.viewmodel.ListWithHeaderViewModel;import com.cody.repository.business.bean.SendCouponBean;import com.cody.repository.business.local.LocalKey;import com.cody.repository.framework.Repository;import com.cody.xf.utils.LogUtil;import java.util.ArrayList;import java.util.List;/** * Created by chen.huarong on 2018/8/16. * 成交客户页面 */public class BargainCustomerViewModel extends ListWithHeaderViewModel<ItemPotentialCustomerViewModel> {    //tab选中状态    public static final int TAB_CHECK_ORDER_TIME = 0;//下单时间    public static final int TAB_CHECK_ORDER_AMOUNT = 1;//累计消费    public static final int TAB_CHECK_ORDER_RECENT_BEHAVIOR = 2;//最近行为    //筛选    public static final int FILTER_TYPE_ALL = 0;//全部    public static final int FILTER_TYPE_IM = 1;//IM咨询    public static final int FILTER_TYPE_BROWSESHOP = 2;//浏览店铺    public static final int FILTER_TYPE_BROWSEGOOD = 3;//浏览单品    public static final int FILTER_TYPE_ADD_CART = 4;//加入购物车    public static final int FILTER_TYPE_ADD_ATEENTION = 5;//加入心愿单    public static final int FILTER_TYPE_GOT_COUPON = 6;//领券    private final ObservableBoolean mTotalCheck = new ObservableBoolean(false);//全选    private final ObservableBoolean mUncouponCheck = new ObservableBoolean(false);//未发券    private final ObservableBoolean mIsSendCoupons = new ObservableBoolean(false);//是否是发券状态    private final ObservableInt mFilterType = new ObservableInt(FILTER_TYPE_ALL);//筛选类型    private final ObservableInt mTabChecked = new ObservableInt(TAB_CHECK_ORDER_TIME);//tab选中状态    private final ObservableBoolean mFilterLayoutShow = new ObservableBoolean(false);//最近行为筛选是否显示    private final ObservableField<String> mRecentBehavior = new ObservableField<>("最近行为");//最近行为tab显示文案    private final ObservableInt mOrderTimeStatus = new ObservableInt(-1);//下单时间drawable状态 -1降序 1升序    private final ObservableInt mOrderAmountStatus = new ObservableInt(0);//累计消费drawable状态 -1降序 0未选中 1升序    private final ObservableInt mRecentBehaviorStatus = new ObservableInt(0);//最近行为drawable状态  0未选中 1选中    private final ObservableField<String> mConfirmBtnText = new ObservableField<>("确认");    private int totalCount;//总人数    private ObservableInt checkCount = new ObservableInt(0);//选中人数    private String shopId;//店铺id    public ObservableBoolean getTotalCheck() {        return mTotalCheck;    }    public void setTotalCheck(boolean value) {        mTotalCheck.set(value);    }    public ObservableBoolean getUncouponCheck() {        return mUncouponCheck;    }    public void setUncouponCheck(boolean value) {        mUncouponCheck.set(value);    }    public ObservableBoolean getIsSendCoupons() {        return mIsSendCoupons;    }    public void setIsSendCoupons(boolean value) {        mIsSendCoupons.set(value);    }    public void toggleIsSendCoupons() {        mIsSendCoupons.set(!mIsSendCoupons.get());        if (mIsSendCoupons.get()) {            getHeaderViewModel().setRightText("取消");        } else {            getHeaderViewModel().setRightText("发券");        }    }    public ObservableInt getFilterType() {        return mFilterType;    }    public void setFilterType(int position) {        mFilterType.set(position);    }    public ObservableInt getTabChecked() {        return mTabChecked;    }    public void setTabChecked(int whichTab) {        mTabChecked.set(whichTab);    }    public ObservableBoolean getFilterLayoutShow() {        return mFilterLayoutShow;    }    public void toggleFilterLayoutShow() {        mFilterLayoutShow.set(!mFilterLayoutShow.get());    }    public void setFilterLayoutShow(boolean filterLayoutShow) {        mFilterLayoutShow.set(filterLayoutShow);    }    public ObservableField<String> getRecentBehavior() {        return mRecentBehavior;    }    public void setRecentBehavior(String recentBehavior) {        mRecentBehavior.set(recentBehavior);    }    public ObservableInt getOrderTimeStatus() {        return mOrderTimeStatus;    }    public void setOrderTimeStatus(int orderTimeStatus) {        mOrderTimeStatus.set(orderTimeStatus);    }    public ObservableInt getOrderAmountStatus() {        return mOrderAmountStatus;    }    public void setOrderAmountStatus(int orderAmountStatus) {        mOrderAmountStatus.set(orderAmountStatus);    }    public ObservableInt getRecentBehaviorStatus() {        return mRecentBehaviorStatus;    }    public void setRecentBehaviorStatus(int recentBehaviorStatus) {        mRecentBehaviorStatus.set(recentBehaviorStatus);    }    public ObservableField<String> getConfirmBtnText() {        return mConfirmBtnText;    }    public void setCheckCount(int checkCount) {        this.checkCount.set(checkCount);        //设置选中人数的时候需要修改确认按钮的文案        if (checkCount == 0) {            this.mConfirmBtnText.set("确认");//            setUncouponCheck(false);//            setTotalCheck(false);        } else {            this.mConfirmBtnText.set(String.format("确认(%d)", checkCount));        }    }    public ObservableInt getCheckCount() {        return checkCount;    }    public void addCheckCount() {        if (checkCount.get() < totalCount) {            setCheckCount(checkCount.get() + 1);        }    }    public void subtractCheckCount() {        if (checkCount.get() > 0) {            setCheckCount(checkCount.get() - 1);        }    }    public int getTotalCount() {        return totalCount;    }    public void setTotalCount(int totalCount) {        this.totalCount = totalCount;    }    public String getShopId() {        return shopId;    }    public void setShopId(String shopId) {        this.shopId = shopId;    }    /**     * 获取过滤字段     *     * @return     */    public String getQueryField() {        String queryField = String.format("shopId:%s;type:3", Repository.getLocalValue(LocalKey.SHOP_ID));        int lastBehaviorFlag = 0;        switch (mFilterType.get()) {//筛选条件            case BargainCustomerViewModel.FILTER_TYPE_IM:                lastBehaviorFlag = 3;                break;            case BargainCustomerViewModel.FILTER_TYPE_BROWSESHOP:                lastBehaviorFlag = 1;                break;            case BargainCustomerViewModel.FILTER_TYPE_BROWSEGOOD:                lastBehaviorFlag = 2;                break;            case BargainCustomerViewModel.FILTER_TYPE_ADD_CART:                lastBehaviorFlag = 4;                break;            case BargainCustomerViewModel.FILTER_TYPE_ADD_ATEENTION:                lastBehaviorFlag = 5;                break;            case BargainCustomerViewModel.FILTER_TYPE_GOT_COUPON:                lastBehaviorFlag = 6;                break;        }        if (lastBehaviorFlag != 0) {//不是全选            queryField += ";lastBehaviorFlag:" + lastBehaviorFlag;        }        if (mUncouponCheck.get()) {//选中未领券            queryField += ";sendCouponCount:0";        }        LogUtil.d("queryField=" + queryField);        return queryField;    }    /**     * 给接口的客户列表有两种（选中全选或者未发券时返回未选中客户列表，其他情况返回选中客户列表或者）     *     * @return     */    public List<SendCouponBean.UserListBean> getUserListBean() {        List<SendCouponBean.UserListBean> userListBeans = new ArrayList<>();        for (ItemPotentialCustomerViewModel itemLatentCustomerViewModel : this) {            if (mUncouponCheck.get() || mTotalCheck.get()) {//返回未选中的客户                if (!itemLatentCustomerViewModel.getCheck().get()) {//未选中                    SendCouponBean.UserListBean userListBean = new SendCouponBean.UserListBean();                    userListBean.setUserOpenId(itemLatentCustomerViewModel.getOpenId());                    userListBeans.add(userListBean);                }            } else {                if (itemLatentCustomerViewModel.getCheck().get()) {//选中                    SendCouponBean.UserListBean userListBean = new SendCouponBean.UserListBean();                    userListBean.setUserOpenId(itemLatentCustomerViewModel.getOpenId());                    userListBeans.add(userListBean);                }            }        }        return userListBeans;    }}